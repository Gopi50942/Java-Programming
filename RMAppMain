import java.time.LocalDate;
import java.util.*;

// ------------------- Order Class -------------------
class Order {
    private final int orderId;
    private String buyer;
    private List<String> items;
    private double totalAmount;
    private LocalDate purchaseDate;

    public Order(int orderId, String buyer, List<String> items, double totalAmount, LocalDate purchaseDate) {
        this.orderId = orderId;
        this.buyer = buyer;
        this.items = new ArrayList<>(items);
        this.totalAmount = totalAmount;
        this.purchaseDate = purchaseDate;
    }

    public int getOrderId() { return orderId; }
    public String getBuyer() { return buyer; }
    public void setBuyer(String buyer) { this.buyer = buyer; }
    public List<String> getItems() { return items; }
    public void setItems(List<String> items) { this.items = items; }
    public double getTotalAmount() { return totalAmount; }
    public void setTotalAmount(double totalAmount) { this.totalAmount = totalAmount; }
    public LocalDate getPurchaseDate() { return purchaseDate; }
    public void setPurchaseDate(LocalDate purchaseDate) { this.purchaseDate = purchaseDate; }

    public void printSummary() {
        System.out.println("Order #" + orderId + " Buyer: " + buyer + " Items: " + items + " Amount: " + totalAmount);
    }
}

// ------------------- ReturnRequest Class -------------------
class ReturnRequest {
    private final int rmaId;
    private final int orderId;
    private String reason;
    private String condition;
    private String status; // REQUESTED, APPROVED, DENIED, REFUNDED

    public ReturnRequest(int rmaId, int orderId, String reason, String condition) {
        this.rmaId = rmaId;
        this.orderId = orderId;
        this.reason = reason;
        this.condition = condition;
        this.status = "REQUESTED";
    }

    public int getRmaId() { return rmaId; }
    public int getOrderId() { return orderId; }
    public String getReason() { return reason; }
    public void setReason(String reason) { this.reason = reason; }
    public String getCondition() { return condition; }
    public void setCondition(String condition) { this.condition = condition; }
    public String getStatus() { return status; }

    // Encapsulation: only controlled transitions
    public void approve() {
        if (status.equals("REQUESTED")) status = "APPROVED";
    }
    public void deny() {
        if (status.equals("REQUESTED")) status = "DENIED";
    }
    public void markRefunded() {
        if (status.equals("APPROVED")) status = "REFUNDED";
    }

    public void printSummary() {
        System.out.println("RMA #" + rmaId + " for Order #" + orderId + " Reason: " + reason + " Condition: " + condition + " Status: " + status);
    }
}

// ------------------- Refund Class -------------------
abstract class Refund {
    protected final int refundId;
    protected final int rmaId;
    protected String method;
    protected double amount;
    protected LocalDate processedDate;

    public Refund(int refundId, int rmaId, String method, double amount) {
        this.refundId = refundId;
        this.rmaId = rmaId;
        this.method = method;
        this.amount = amount;
        this.processedDate = null;
    }

    public int getRefundId() { return refundId; }
    public int getRmaId() { return rmaId; }
    public String getMethod() { return method; }
    public double getAmount() { return amount; }
    public LocalDate getProcessedDate() { return processedDate; }

    public abstract void processRefund(); // Overridden by subtypes

    public void printSummary() {
        System.out.println("Refund #" + refundId + " RMA: " + rmaId + " Method: " + method + " Amount: " + amount + " Date: " + processedDate);
    }
}

// ------------------- Subclasses for Refund -------------------
class CardRefund extends Refund {
    public CardRefund(int refundId, int rmaId, double amount) {
        super(refundId, rmaId, "CARD", amount);
    }

    @Override
    public void processRefund() {
        this.processedDate = LocalDate.now();
        System.out.println("[CardRefund] Processed refund of Rs." + amount + " for RMA #" + rmaId);
    }
}

class WalletRefund extends Refund {
    public WalletRefund(int refundId, int rmaId, double amount) {
        super(refundId, rmaId, "WALLET", amount);
    }

    @Override
    public void processRefund() {
        this.processedDate = LocalDate.now();
        System.out.println("[WalletRefund] Wallet credited with Rs." + amount + " for RMA #" + rmaId);
    }
}

// ------------------- RMAService -------------------
class RMAService {
    private Map<Integer, Order> orders = new HashMap<>();
    private Map<Integer, ReturnRequest> requests = new HashMap<>();
    private Map<Integer, Refund> refunds = new HashMap<>();

    private int nextRmaId = 1;
    private int nextRefundId = 1;

    // Load order
    public void loadOrder(Order o) {
        orders.put(o.getOrderId(), o);
        System.out.println("Loaded order #" + o.getOrderId());
    }

    // Overloaded createRMA - simple
    public ReturnRequest createRMA(int orderId, String reason, String condition) {
        ReturnRequest r = new ReturnRequest(nextRmaId++, orderId, reason, condition);
        requests.put(r.getRmaId(), r);
        System.out.println("Created RMA #" + r.getRmaId());
        return r;
    }

    // Overloaded createRMA - with photos (simulated)
    public ReturnRequest createRMA(int orderId, String reason, String condition, List<String> photos) {
        System.out.println("Photos attached: " + photos);
        return createRMA(orderId, reason, condition);
    }

    // Inspect item
    public void inspectItem(int rmaId, boolean goodCondition) {
        ReturnRequest r = requests.get(rmaId);
        if (r == null) return;
        if (goodCondition) r.approve();
        else r.deny();
        System.out.println("Inspection complete for RMA #" + rmaId + " => Status: " + r.getStatus());
    }

    // Process refund
    public void processRefund(int rmaId, String method) {
        ReturnRequest r = requests.get(rmaId);
        if (r == null || !r.getStatus().equals("APPROVED")) {
            System.out.println("Refund cannot be processed for RMA #" + rmaId);
            return;
        }
        double amount = orders.get(r.getOrderId()).getTotalAmount();
        Refund refund;
        if (method.equalsIgnoreCase("CARD")) refund = new CardRefund(nextRefundId++, rmaId, amount);
        else refund = new WalletRefund(nextRefundId++, rmaId, amount);

        refund.processRefund(); // Polymorphic call
        refunds.put(refund.getRefundId(), refund);
        r.markRefunded();
    }

    public void printRMASummary() {
        System.out.println("--- RMA Summary ---");
        for (ReturnRequest r : requests.values()) r.printSummary();
    }

    public void printRefundSummary() {
        System.out.println("--- Refund Summary ---");
        for (Refund f : refunds.values()) f.printSummary();
    }
}

// ------------------- Main Application -------------------
public class RMAppMain {
    public static void main(String[] args) {
        RMAService service = new RMAService();

        // Load orders
        Order o1 = new Order(1, "Priya", Arrays.asList("Shoes", "Bag"), 2500.0, LocalDate.now().minusDays(5));
        Order o2 = new Order(2, "Arjun", Arrays.asList("Phone"), 15000.0, LocalDate.now().minusDays(3));
        service.loadOrder(o1);
        service.loadOrder(o2);

        // Create RMAs
        ReturnRequest r1 = service.createRMA(1, "Size issue", "Good");
        ReturnRequest r2 = service.createRMA(2, "Defective", "Damaged", Arrays.asList("photo1.jpg", "photo2.jpg"));

        // Inspect
        service.inspectItem(r1.getRmaId(), true);
        service.inspectItem(r2.getRmaId(), false);

        // Process refund for approved
        service.processRefund(r1.getRmaId(), "CARD");

        // Print summaries
        service.printRMASummary();
        service.printRefundSummary();
    }
}
